x-main:
  &main
  build: { context: ./main, target: dev }
  image: main:dev
  stdin_open: true
  tty       : true
  volumes:
    - ./main:/home/app/src
  environment:
    DB_USER     : ${DB_USER:-postgres}
    DB_PASSWORD : ${DB_PASSWORD:-123456}
    DB_HOST     : ${DB_HOST:-db}
    DB_PORT     : ${DB_PORT:-5432}
    DB_NAME     : ${DB_NAME:-main}
    CELERY_BROKER_URL       : ${CELERY_BROKER_URL:-redis://redis:6379/0}
    DEBUG                   : ${DEBUG:-True}
    DEBUG_TOOLBAR           : ${DEBUG_TOOLBAR:-True}
    SCHEMA                  : ${SCHEMA:-http}
    SECRET_KEY              : ${SECRET_KEY:-some_secret_key}  # if you change the secret key don't forget change all passwords 
    DOMAIN                  : ${DOMAIN:-dev.localhost}
    SERVER_EMAIL            : ${SERVER_EMAIL:-noreply@dev.localhost}
    DEFAULT_FROM_EMAIL      : ${DEFAULT_FROM_EMAIL:-noreply@dev.localhost}


volumes:
  redis:
  db:


services:
  main:
    <<: *main
    ports:
      - 8000:8000
    command: ["granian", "--interface", "asginl", "config.asgi:application", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval    : 60s
      timeout     : 5s
      start_period: 5s
      retries     : 3
  # ----------------------------------------------
  db:
    image: postgres:17.5-alpine3.21
    volumes:
      - db:/var/lib/postgresql/data
      # script to create multiple databases
      - ./utils/multiple-databases.sh:/docker-entrypoint-initdb.d/multiple-databases.sh
    ports:
      - 5432:5432  # expose it for dev tools
    environment:
      POSTGRES_USER    : ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-123456}
      # Note: the dbs are created when the container is created, not when the container is started
      POSTGRES_MULTIPLE_DATABASES : ${DB_NAME:-main}
  # ----------------------------------------------
  redis:
    image: redis:6.2.6-alpine3.15
    ports:
      - 6379:6379 # expose it for dev tools
    volumes: 
      - redis:/data
  # ----------------------------------------------
  nginx:
    image: nginx:1.25
    volumes:
      # nginx.conf.template will be processed by envsubst 
      # to replace the variables from the environment
      # the result will be saved in /etc/nginx/nginx.conf 
      - ./utils/nginx.conf:/etc/nginx/templates/nginx.conf.template:ro
    ports:
      - 80:80
    depends_on:
      - main
    environment:
      DOMAIN: ${DOMAIN:-dev.localhost}
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx
  # ----------------------------------------------




  # open-webui:
  #   image: ghcr.io/open-webui/open-webui:main
  #   container_name: open-webui
  #   restart: always
  #   network_mode: host
  #   # ports:
  #   #   - "3000:8080"
  #   volumes:
  #     - open-webui:/app/backend/data
  #   # extra_hosts:
  #   #   - host.docker.internal:host-gateway
  #   environment:
  #     - OLLAMA_BASE_URL=http://127.0.0.1:11434
  #     # - OLLAMA_BASE_URL=http://host.docker.internal:11434
# volumes:
#   open-webui:

# docker run -d -p 3000:8080 --gpus=all -v ollama:/root/.ollama -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:ollama
